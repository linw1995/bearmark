name: Try to create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha

      - name: Install dependencies
        run: |
          sudo apt install -yq \
            build-essential \
            musl-dev \
            musl-tools

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-unknown-linux-musl

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Build release
        continue-on-error: true
        run: |
          cargo build --bin serve --release --verbose
          cp `find . -name serve -type f` ./server
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"

      - uses: actions/download-artifact@v4
        with:
          # Name of the artifact to download.
          # If unspecified, all artifacts for the run are downloaded.
          # Optional.
          name: dist
          # Destination path. Supports basic tilde expansion.
          # Optional. Default is $GITHUB_WORKSPACE
          path: ./static
          # A glob pattern to the artifacts that should be downloaded.
          # Ignored if name is specified.
          # Optional.
          pattern:
          # When multiple artifacts are matched, this changes the behavior of the destination directories.
          # If true, the downloaded artifacts will be in the same directory specified by path.
          # If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
          # Optional. Default is 'false'
          merge-multiple: false
          # The GitHub token used to authenticate with the GitHub API.
          # This is required when downloading artifacts from a different repository or from a different workflow run.
          # Optional. If unspecified, the action will download artifacts from the current repo and the current workflow run.
          github-token: ${{ secrets.GH_PAT_WEB }}
          # The repository owner and the repository name joined together by "/".
          # If github-token is specified, this is the repository that artifacts will be downloaded from.
          # Optional. Default is ${{ github.repository }}
          repository: linw1995/bearmark_web
          # The id of the workflow run where the desired download artifact was uploaded from.
          # If github-token is specified, this is the run that artifacts will be downloaded from.
          # Optional. Default is ${{ github.run_id }}
          run-id: 10389732985

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
